<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on Andrew Goss · DataOps Leader</title>
    <link>https://andrewrgoss.com/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on Andrew Goss · DataOps Leader</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>admin@andrewrgoss.com (Andrew Goss)</managingEditor>
    <webMaster>admin@andrewrgoss.com (Andrew Goss)</webMaster>
    <lastBuildDate>Sun, 28 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://andrewrgoss.com/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Functional Data Engineering</title>
      <link>https://andrewrgoss.com/2018/functional-data-engineering/</link>
      <pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate>
      <author>admin@andrewrgoss.com (Andrew Goss)</author>
      <guid>https://andrewrgoss.com/2018/functional-data-engineering/</guid>
      <description>written by Maxime Beauchemin
View original article
Batch data processing — historically known as ETL — is extremely challenging. It&amp;rsquo;s time-consuming, brittle, and often unrewarding. Not only that, it&amp;rsquo;s hard to operate, evolve, and troubleshoot.
In this post, we&amp;rsquo;ll explore how applying the functional programming paradigm to data engineering can bring a lot of clarity to the process. This post distills fragments of wisdom accumulated while working at Yahoo, Facebook, Airbnb and Lyft, with the perspective of well over a decade of data warehousing and data engineering experience.</description>
    </item>
    
  </channel>
</rss>